{% extends 'base.html' %}
{% block title %} Dunistech Academy {% endblock title %}

{% block content %}
<style>
    /* for lg */

    .custom-switch.custom-switch-lg .custom-control-label {
        padding-left: 3rem;
        padding-bottom: 2rem;
    }

    .custom-switch.custom-switch-lg .custom-control-label::before {
        height: 2rem;
        width: calc(3rem + 0.75rem);
        border-radius: 4rem;
    }

    .custom-switch.custom-switch-lg .custom-control-label::after {
        width: calc(2rem - 4px);
        height: calc(2rem - 4px);
        border-radius: calc(3rem - (2rem / 2));
    }

    .custom-switch.custom-switch-lg .custom-control-input:checked~.custom-control-label::after {
        transform: translateX(calc(2rem - 0.25rem));
    }

    /* for xl */

    .custom-switch.custom-switch-xl .custom-control-label {
        padding-left: 4rem;
        padding-bottom: 2.5rem;
    }

    .custom-switch.custom-switch-xl .custom-control-label::before {
        height: 2.5rem;
        width: calc(4rem + 0.75rem);
        border-radius: 5rem;
    }

    .custom-switch.custom-switch-xl .custom-control-label::after {
        width: calc(2.5rem - 4px);
        height: calc(2.5rem - 4px);
        border-radius: calc(4rem - (2.5rem / 2));
    }

    .custom-switch.custom-switch-xl .custom-control-input:checked~.custom-control-label::after {
        transform: translateX(calc(2.5rem - 0.25rem));
    }

    .custom-control-input:checked~.custom-control-label::before {
        background-color: #2be107;
        border-color: #5ae508;
        cursor: pointer;
    }

    /* for modals */
    /* Ensure the CRUD modal appears above the task assignment modal */
#crudModal {
    z-index: 1061;
}
#crudModal + .modal-backdrop {
    z-index: 1060;
}

</style>
<div class="wrapper">
    {% include 'incs/sidenav.html' %}
    {% include 'incs/topnav.html' %}
    <div class="content-page">
        
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-4">
                    <div class="card card-transparent card-block card-stretch card-height border-none">
                        <div class="card-body p-0 mt-lg-2 mt-0">
                            <h3 class="mb-3" id="greet">Hi {{current_user.username}},</h3>
                            <p class="mb-0 mr-4 text-warning">
                                We keep track of key performance, business process &
                                Statistics.
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-8">
                    <div class="row">
                        <div class="col-lg-6 col-md-6">
                            <div class="card card-block card-stretch card-height">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-4 card-total-sale">
                                        <div class="icon iq-icon-box-2 bg-info-light">
                                            <img src="{{url_for('static', filename='images/product/1.png')}}"
                                                class="img-fluid" alt="image">
                                        </div>
                                        <div>
                                            <b class="mb-2">Assigned tasks</b>
                                        </div>
                                    </div>
                                    <button class="btn btn-secondary rounded-pill mt-2" data-toggle="modal" 
                                    data-target="#taskModalScrollable">
                                        Click to view | 34</button>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6 col-md-6">
                            <div class="card card-block card-stretch card-height">

                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-4 card-total-sale">
                                        <div>
                                            <b class="mb-2">Total Attendance</b>
                                            <h4 id="totalAttendance">28</h4>
                                        </div>
                                    </div>

                                    <div class="custom-control custom-switch custom-switch-xl">
                                        <input type="checkbox" class="custom-control-input" id="customSwitch8" checked>
                                        <label class="custom-control-label" for="customSwitch8"> </label>
                                    </div>
                                    <b id="attendance-text" class="text-secondary">Switch to clock out</b>
                                </div>
                                <div id="message" class="mt-3"></div>
                            </div>
                        </div>
                        
                    </div>
                </div>
                <!-------->
            </div>
            <!-- Page end  -->
        </div>
        
        <div class="container-fluid">
                <!-- Add this HTML snippet to your template file for adding and updating tasks -->
                <div class="row">
                    <div class="col-lg-12">
                        <div class="d-flex flex-wrap align-items-center justify-content-between mb-4">
                            <div>
                                <h4 class="mb-3">Daily Task Record(s)</h4>
                                <p class="mb-0 text-warning">Filter-by date to see tasks marked for each day(s)</p>
                            </div>
                            <button id="add-task-button" class="btn btn-primary add-list">
                                <i class="las la-plus mr-3"></i>Record Task(s)
                            </button>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="table-responsive rounded mb-3">
                            <table class="data-table table mb-0 tbl-server-info">
                                <thead class="bg-white text-uppercase">
                                    <tr class="ligth ligth-data">
                                        <th>S/N</th>
                                        <th>Tasks</th>
                                        <th>Status</th>
                                        <th>Time Stamp</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                
                                <tbody id="task-table-body" class="ligth-body">

                                    <tr id="original-task-row" class="d-none">
                                        <td></td>
                                        <td><input type="text" class="form-control" placeholder="New task description"></td>
                                        <td>
                                            <select class="custom-select">
                                                <option value="pending" selected>Pending</option>
                                                <option value="completed">Completed</option>
                                                <option value="on-going">On-going</option>
                                                <option value="stucked">Stucked</option>
                                                <option value="cancelled">Cancelled</option>
                                            </select>
                                        </td>
                                        <td><input type="date" class="form-control"></td>
                                        <td>
                                            <button class="btn btn-success" onclick="saveNewTask(this)">
                                                <i class="las la-plus mr-0"></i>
                                            </button>
                                            <button class="btn btn-warning" onclick="removeNewTaskRow(this)">
                                                <i class="ri-delete-bin-line mr-0"></i>
                                            </button>
                                        </td>
                                    </tr>

                                    {% for task in tasks_list %}
                                    <tr>
                                        <td><select class="selectpicker form-control" data-live-search="true" data-width="fit">
                                            <option>Mustard jweihhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh diwbuiwuiw uiebuie</option>
                                            <option>Ketchup</option>
                                            <option>Relish</option>

                                            <option>Mustard</option>
                                            <option>Ketchup</option>
                                            <option>Relish</option>
                                          </select>
                                        </td>

                                        <td>{{ loop.index }}</td>
                                        <td>
                                            <input type="text" value="{{task.description}}" 
                                            data-task-id="{{task.id}}" onchange="updateTask(this)" class="form-control" 
                                            placeholder="New task description">
                                        </td>
                                        <td>
                                            <select class="custom-select" data-task-id="{{task.id}}" 
                                            onchange="updateTask(this)">
                                                {% for status in status_options %}
                                                <option value="{{ status }}" {% if task.status == status %} 
                                                selected {% endif %}>
                                                    {{ status|title }}
                                                </option>
                                                {% endfor %}
                                            </select>
                                        </td>
                                        <td>
                                            <input type="date" class="form-control"
                                            value="{{ task.timestamp }}" data-task-id="{{task.id}}" onchange="updateTask(this)"> 
                                        </td>
                                        <td>
                                            <button class="btn btn-warning" onclick="deleteTask({{ task.id }}, this)">Delete</button>
                                        </td>
                                    </tr>
                                    {% endfor %}
                                    <!-- Existing task rows will go here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
        </div>

    </div>

</div>

<!-- - crud modal---->
<div class="modal fade" id="crudModal" tabindex="-1" role="dialog" aria-labelledby="crudModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="crudModalLabel">Operation Status</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-secondary" id="crudModalBody">
                <!-- Message will be dynamically inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!----modal assigned tasks -->
<div class="modal fade" id="taskModalScrollable" tabindex="-1" 
aria-labelledby="taskModalScrollableTitle" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable modal-lg" role="document">
       <div class="modal-content">
          <div class="modal-header">
             <h5 class="modal-title" id="taskModalScrollableTitle">My Assigned Tasks</h5>
             <button type="button" class="close" data-dismiss="modal" aria-label="Close">
             <span aria-hidden="true">×</span>
             </button>
          </div>
          <div class="modal-body">
            
            <!------->
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="d-flex flex-wrap flex-wrap align-items-center justify-content-between mb-4">
                            <div>
                                <h4 class="mb-3">Daily Tasks</h4>
                            </div>
                            <button id="assigned-add-task-button" class="btn btn-primary add-list">
                                <i class="las la-plus mr-3"></i>Assign New Task</button>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="table-responsive rounded">
                        <table class="data-tables table mb-0 tbl-server-info">
                            <thead class="bg-white text-uppercase">
                                <tr class="ligth ligth-data">
                                    <th>S/N</th>
                                    <th>Task details</th>
                                    <th>Task duration </th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="assigned-task-table-body" class="ligth-body">
                                <tr id="assigned-original-task-row" class="d-none">
                                    <td>..</td>
                                    <td>
                                        <input type="text" class="form-control" 
                                        placeholder="Provide new task details"></td>
                                    <td><input  type="time" placeholder="enter duration like: 3 hrs" 
                                        class="form-control">
                                    </td>
                                    <td>
                                        <button class="btn btn-success" onclick="assignedSaveNewTask(this)">
                                            <i class="las la-plus mr-0"></i>
                                        </button>
                                        <button class="btn btn-warning" onclick="assignedRemoveNewTaskRow(this)">
                                            <i class="ri-delete-bin-line mr-0"></i>
                                        </button>
                                    </td>
                                </tr>
                                
                                {% for task in assigned_tasks_list %}
                                <tr>
                                    <td>{{ loop.index }}</td>
                                    <td>
                                        <input type="text" value="{{task.detail}}" 
                                        data-task-id="{{task.id}}" onchange="updateTask(this)" class="form-control" 
                                        placeholder="New task details">
                                    </td>
                                    <td>
                                        <input type="time" class="form-control"
                                        value="{{ task.duration }}" data-task-id="{{task.id}}" onchange="assignedUpdateTask(this)"> 
                                    </td>
                                    <td>
                                        {#<button class="btn btn-warning" onclick="assignedDeleteTask({{ task.id }})">
                                            <i class="ri-delete-bin-line mr-0"></i>
                                        </button>#}
                                        <button class="btn btn-danger" onclick="assignedDeleteTask({{ task.id }}, this)">
                                            <i class="ri-delete-bin-line mr-0"></i>
                                        </button>
                                    </td>
                                </tr>
                                {% endfor %}
                                {#<tr>
                                    <td>Creating the front pages .....................................</td>
                                    <td>3 hrs </td>
                                    <td>
                                        <div class="d-flex align-items-center list-action">
                                            <a class="badge bg-warning mr-2" data-toggle="tooltip" data-placement="top" title="" data-original-title="Delete"
                                                href="#"><i class="ri-delete-bin-line mr-0"></i></a>
                                        </div>
                                    </td>
                                </tr> #}

                            </tbody>
                        </table>
                        </div>
                    </div>
                </div>
                <!-- Page end  -->
            </div>
            <!------->
          </div>
          <div class="modal-footer">
             <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
       </div>
    </div>
 </div>

<!-- Wrapper End-->
{% endblock content %}
{% block page_js %}

<script src = "{{url_for('static', filename='js/assigned_task.js')}}"></script>

<script>

    function showCrudModal(message) {
        document.getElementById('crudModalBody').innerText = message;
        $('#crudModal').modal('show');
    }
    
    document.getElementById('add-task-button').addEventListener('click', function() {
        addTaskRow();
    });
    
    function addTaskRow() {
        const taskTableBody = document.getElementById('task-table-body');
        const originalRow = document.getElementById('original-task-row');
    
        const clonedRow = originalRow.cloneNode(true);
        clonedRow.id = '';  // Clear the id of the cloned row
        // clonedRow.style.visibility = '';  // Ensure the cloned row is visible
        // Assuming clonedRow is already defined somewhere in your code
        clonedRow.classList.remove("d-none");

    
        // Insert the new row at the top
        taskTableBody.insertBefore(clonedRow, taskTableBody.firstChild);
    
        // Update the serial number for the new row and subsequent rows
        updateSerialNumbers();
    }
    
    function saveNewTask(button) {
        const row = button.closest('tr');
        const description = row.querySelector('input[type="text"]').value;
        const status = row.querySelector('select').value;
        const timestamp = row.querySelector('input[type="date"]').value;
    
        if (!description) {
            let desc = row.querySelector('input[type="text"]');
            desc.style.border = "1px inset brown";
            desc.placeholder = "fill-out task description to continue";
            return;
        } 
    
        const task = {
            description: description,
            status: status,
            timestamp: timestamp
        };

        $.ajax({
            url: '/tasks',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(task),
            success: function(data) {
                if (data.success) {

                    showCrudModal('Task saved successfully');
                    // Hide the Save and Cancel buttons
                    row.querySelector('.btn-success').style.display = 'none';
                    row.querySelector('.btn-warning').style.display = 'none';
                    row.classList.remove('new-task-row');

                    // Update serial numbers
                    updateSerialNumbers();
    
                } else {
                    alert.text(data.error).addClass("alert-warning").removeClass("alert-success");
                }
            },
            error: function(xhr, status, error) {
                showCrudModal(error);
                console.error('Error:', error);
            }
        });
    }
    
    function updateSerialNumbers() {
        const taskTableBody = document.getElementById('task-table-body');
        const rows = taskTableBody.querySelectorAll('tr');
        rows.forEach((row, index) => {
            const serialCell = row.querySelector('td');
            if (serialCell) {
                serialCell.textContent = index + 1;
            }
        });
    }
    
    
    function removeNewTaskRow(button){
        const row = button.closest('tr');
        row.remove();
        updateSerialNumbers();
    }
    
    function updateSerialNumbers() {
        const taskTableBody = document.getElementById('task-table-body');
        const rows = taskTableBody.querySelectorAll('tr');
        rows.forEach((row, index) => {
            const serialCell = row.querySelector('td');
            if (serialCell) {
                serialCell.textContent = index + 1;
            }
        });
    }


    function updateTask(element) {
        const taskId = element.getAttribute('data-task-id');
        const row = element.closest('tr');
        const description = row.querySelector('input[type="text"]').value;
        const status = row.querySelector('select').value;
        const timestamp = row.querySelector('input[type="date"]').value;
    
        const task = {
            id: taskId,
            description: description,
            status: status,
            timestamp: timestamp
        };
    
        $.ajax({
            url: `/tasks/${taskId}`,
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(task),
            success: function(data) {
                if (data.success) {
                    showCrudModal(data.message);
                    console.log('Task updated successfully');
                } else {
                    showCrudModal( data.error );
                    console.error('Error updating task:', data.error);
                }
            },
            error: function(xhr, status, error) {
                showCrudModal( error );
                console.error('Error:', error);
            }
        });
    }
    
    function deleteTask(taskId, button) {
        const row = button.closest('tr'); // Capture the row element
        $.ajax({
            url: `/tasks/${taskId}`,
            type: 'DELETE',
            success: function(data) {
                if (data.success) {
                    showCrudModal('Task deleted successfully');
                    console.log('Task deleted successfully');
                    row.remove();
                } else {
                    showCrudModal( data.error );
                    console.error('Error deleting task:', data.error);
                }
            },
            error: function(xhr, status, error) {
                showCrudModal(error );
                console.error('Error:', error);
            }
        });
    }

</script>


<script>

    function showMessage(message, type = 'success') {
        const messageDiv = document.getElementById('message');
        const attendanceText = document.getElementById('attendance-text');
        attendanceText.innerText = `${message}`;
    }

    document.addEventListener("DOMContentLoaded", function () {

        checkStatus();

        document.getElementById('customSwitch8').addEventListener('change', function () {
            handleAttendance(this.checked);
        });
    });


    function checkStatus() {
        fetch('/status')
            .then(response => response.json())
            .then(data => {
                const switchControl = document.getElementById('customSwitch8');
                const attendanceText = document.getElementById('attendance-text');
                if (data.status === 'signed_in') {
                    switchControl.checked = true;
                    attendanceText.textContent = 'Switch to clock out';
                } else {
                    switchControl.checked = false;
                    attendanceText.textContent = 'Switch to clock in';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred while checking status.', 'danger');
            });
    }

    function handleAttendance(isSigningIn) {
        const action = isSigningIn ? 'signin' : 'signout';

        fetch('/attendance', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ action: action })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                return response.json();
            })
            .then(data => {
                //showMessage(data.message);
                //const attendanceText = document.getElementById('attendance-text');
                if (isSigningIn) {
                    //attendanceText.textContent = 'Switch to clock out';
                    showMessage(data.message, 'danger');
                } else {
                    //attendanceText.textContent = 'Switch to clock in';
                    showMessage(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred: ' + error.message, 'danger');
            });
    }

    document.addEventListener("DOMContentLoaded", function () {
        getTotalAttendance();
    });

    function getTotalAttendance() {
        fetch('/total_attendance')
            .then(response => response.json())
            .then(data => {
                const totalAttendanceDiv = document.getElementById('totalAttendance');
                totalAttendanceDiv.textContent = `${data.total_attendance} days`;
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

</script>

{% endblock page_js %}